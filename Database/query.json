{
    "restaurantSchemaNameQuery" : "select restaurant_schema_name from mili_global_schema.global_restaurants where restaurant_id = ?",
    "restaurantOrderDetailsQuery" : "select * from restaurantSchemaName.order_detail",
    "restaurantOrderDetailsByOrderStatusAndFoodOrderIdQuery" : "UPDATE restaurantSchemaName.food_order_detail SET order_status = ? WHERE food_order_id = ?",
    "restaurantFoodIdEqualRestaurant_FodMenuId" : "SELECT T1.food_order_id, T1.order_food_cost, T1.user_identifier, T1.table_id, T1.order_status, T1.offer_id, T1.restaurant_food_id, T1.food_customization_comments, T1.food_order_priority, T1.food_count, T1.order_id, T1.user_created, T1.user_updated,T2.restaurant_food_menu_id, T2.food_id, T2.food_name, T2.food_price, T2.food_quantity, T2.is_veg, T2.menu_category_id, T2.menu_category, T2.is_customizable,T2.food_description, T2.is_special_for_today, T2.ready_in, T2.food_likes, T2.is_available FROM restaurantSchemaName.food_order_detail AS T1 inner join restaurantSchemaName.restaurant_food_menu AS T2 ON T1.restaurant_food_id = T2.restaurant_food_menu_id",
    "updateFoodRecommended" : "UPDATE restaurantSchemaName.restaurant_food_menu SET is_recommended = ? WHERE restaurant_food_menu_id = ?",
    "updateFoodAvailableStatus" : "UPDATE restaurantSchemaName.restaurant_food_menu SET is_available = ? WHERE restaurant_food_menu_id = ?",
    "insertFoodInMenu" : "INSERT INTO restaurantSchemaName.restaurant_food_menu ( food_name, food_price, food_quantity, is_veg, menu_category, is_customizable, food_description, ready_in) VALUES (?, ?, ?, ?,  ?, ?, ?, ? )",
    "updateFoodInMenuByFoodMenuId" : "UPDATE restaurantSchemaName.restaurant_food_menu set food_name=?, food_price=?, food_quantity=?, is_veg=?, menu_category=?, is_customizable=?, food_description=?, ready_in=? where restaurant_food_menu_id=?",
    "deleteFoodInMenuByFoodMenuId" : "Delete From restaurantSchemaName.restaurant_food_menu where restaurant_food_menu_id=?",
    "listFoodName" : "SELECT food_name FROM mili_global_schema.global_food_items",
    "listFoodNameByRestaurantId" : "SELECT distinct menu_category FROM restaurantSchemaName.restaurant_food_menu",
    "getRestaurantsTypeQuery" : "select * from mili_global_schema.global_restaurants where restaurant_type = ?",
    "getRestaurantMenu" : "select * from restaurantSchemaName.restaurant_food_menu",
    "getRestaurantStaff" : "select * from restaurantSchemaName.staff_restaurant",
    "getRestaurantFood" : "select * from restaurantSchemaName.restaurant_food_menu where restaurant_food_menu_id = ?",
    "getGlobalRestaurantMenu" : "SELECT * FROM mili_global_schema.global_food_items",
    "getRestaurantFoodPrice" : "select * from restaurantSchemaName.food_price_list",
    "getRestaurantOffer" : "select * from restaurantSchemaName.restaurant_offer",
    "getRestaurantUserReview" : "select * from restaurantSchemaName.user_review",
    "getToken" : "select token from mili_global_schema.global_restaurants where restaurant_id = ?",
    "updateToken" : "UPDATE mili_global_schema.global_restaurants SET token = ? WHERE restaurant_id = ?",
    "updateOrderStatus" : "update restaurantSchemaName.order_detail set order_status = ? where order_id = ?",
    "updateOrderPayStatus" : "update restaurantSchemaName.order_detail set payment_status = ? where order_id = ?",
    "getFoodByOrder" : "SELECT T1.food_order_id, T1.order_food_cost, T1.user_identifier, T1.table_id, T1.order_status, T1.offer_id, T1.restaurant_food_id, T1.food_customization_comments, T1.food_order_priority, T1.food_count, T1.order_id, T1.user_created, T1.user_updated,T2.restaurant_food_menu_id, T2.food_id, T2.food_name, T2.food_price, T2.food_quantity, T2.is_veg, T2.menu_category_id, T2.menu_category, T2.is_customizable,T2.food_description, T2.is_special_for_today, T2.ready_in, T2.food_likes, T2.is_available FROM restaurantSchemaName.food_order_detail AS T1 inner join restaurantSchemaName.restaurant_food_menu AS T2 ON T1.restaurant_food_id =T2.restaurant_food_menu_id and T1.order_id = ? and T1.food_order_sequence_no = ?",
    "getFoodByOrderId" : "SELECT T1.food_order_id, T1.order_food_cost, T1.user_identifier, T1.table_id, T1.order_status, T1.offer_id, T1.restaurant_food_id, T1.food_customization_comments, T1.food_order_priority, T1.food_count, T1.order_id, T1.user_created, T1.user_updated,T2.restaurant_food_menu_id, T2.food_id, T2.food_name, T2.food_price, T2.food_quantity, T2.is_veg, T2.menu_category_id, T2.menu_category, T2.is_customizable,T2.food_description, T2.is_special_for_today, T2.ready_in, T2.food_likes, T2.is_available FROM restaurantSchemaName.food_order_detail AS T1 inner join restaurantSchemaName.restaurant_food_menu AS T2 ON T1.restaurant_food_id =T2.restaurant_food_menu_id and T1.order_id = ?",
    "updateTokenByRestaurantId" : "update mili_global_schema.global_restaurants set token = ? where restaurant_id = ?",
    "getTokenByRestaurantId" : "SELECT token FROM mili_global_schema.global_restaurants where restaurant_id = ?",
    "getOrderCountByRestaurantId" : "SELECT count(*) AS orderCount FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail) v WHERE rn = 1",
    "getOrderCountPlacedByRestaurantId" : "SELECT count(*) AS orderCountPlaced FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE  order_status = 'PLACED') v WHERE rn = 1",
    "getOrderCountRejectedByRestaurantId" : "SELECT count(*) AS orderCountRejectd FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE  order_status = 'REJECTED') v WHERE rn = 1",
    "getOrderCountServedByRestaurantId" : "SELECT count(*) AS orderCountServed FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE  order_status = 'SERVED') v WHERE rn = 1",
    "getTotalOrderCostByRestaurantId" : "SELECT sum(total_order_cost) AS totalOrderCost FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE order_status != 'REJECTED') v WHERE rn = 1",
    "getTotalOrderCostPaidByRestaurantId" : "SELECT sum(total_order_cost) AS totalOrderCostPaid FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE order_status != 'REJECTED' and payment_status='PAID') v WHERE rn = 1",
    "getTotalOrderCostNotPaidByRestaurantId" : "SELECT sum(total_order_cost) AS totalOrderCostNotPaid FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail WHERE order_status != 'REJECTED' and payment_status='NOT PAID') v WHERE rn = 1",
    "getTotalOrderPAID" : "SELECT count(*) AS totalOrderPAID FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY sequence_no DESC) rn FROM restaurantSchemaName.order_detail where payment_status='PAID') v WHERE rn = 1",
    "updateFoodOrderStatus" : "update restaurantSchemaName.food_order_detail set order_status = ? where food_order_id = ?"
}